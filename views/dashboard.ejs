<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Discord Bot Admin Dashboard</title>
    <style>
        :root {
            --primary: #7289da;
            --primary-dark: #5b6eae;
            --dark: #36393f;
            --darker: #2f3136;
            --darkest: #202225;
            --light-text: #ffffff;
            --secondary-text: #b9bbbe;
            --danger: #f04747;
            --success: #43b581;
            --warning: #faa61a;
            --info: #00b0f4;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: var(--darker);
            color: var(--light-text);
            display: flex;
            flex-direction: column;
            height: 100vh;
        }
        
        .header {
            background-color: var(--darkest);
            padding: 15px 20px;
            border-bottom: 1px solid #111;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .header h1 {
            color: var(--primary);
            font-size: 24px;
        }
        
        .logout-btn {
            background-color: var(--danger);
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
        }
        
        .main-container {
            display: flex;
            flex: 1;
            overflow: hidden;
        }
        
        .analytics-container {
            background-color: var(--dark);
            padding: 15px;
            border-bottom: 1px solid var(--darkest);
        }
        
        .analytics-cards {
            display: flex;
            gap: 15px;
            margin-top: 10px;
        }
        
        .analytics-card {
            background-color: var(--darker);
            border-radius: 8px;
            padding: 15px;
            flex: 1;
            text-align: center;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }
        
        .analytics-card h3 {
            font-size: 14px;
            color: var(--secondary-text);
            margin-bottom: 8px;
        }
        
        .analytics-card .value {
            font-size: 24px;
            font-weight: bold;
        }
        
        .sidebar {
            width: 300px;
            background-color: var(--darker);
            display: flex;
            flex-direction: column;
            border-right: 1px solid var(--darkest);
        }
        
        .search-container {
            padding: 15px;
            border-bottom: 1px solid var(--darkest);
        }
        
        .search-input {
            width: 100%;
            padding: 10px;
            border-radius: 4px;
            border: none;
            background-color: var(--darkest);
            color: var(--light-text);
        }
        
        .conversations-list {
            flex: 1;
            overflow-y: auto;
        }
        
        .conversation-item {
            padding: 15px;
            border-bottom: 1px solid var(--darkest);
            cursor: pointer;
            transition: background-color 0.2s;
        }
        
        .conversation-item:hover {
            background-color: var(--dark);
        }
        
        .conversation-item.active {
            background-color: var(--primary);
        }
        
        .conversation-item.unread {
            background-color: rgba(114, 137, 218, 0.1);
            border-left: 3px solid var(--primary);
        }
        
        .conversation-item .username {
            font-weight: bold;
            margin-bottom: 5px;
            display: flex;
            justify-content: space-between;
        }
        
        .conversation-item .last-message {
            color: var(--secondary-text);
            font-size: 14px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        
        .conversation-item .timestamp {
            font-size: 12px;
            color: var(--secondary-text);
            margin-top: 5px;
            text-align: right;
        }
        
        .chat-container {
            flex: 1;
            display: flex;
            flex-direction: column;
            background-color: var(--dark);
        }
        
        .chat-header {
            padding: 15px;
            border-bottom: 1px solid var(--darkest);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .chat-header h2 {
            font-size: 18px;
        }
        
        .chat-header .user-id {
            font-size: 12px;
            color: var(--secondary-text);
        }
        
        .chat-messages {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            gap: 16px;
        }
        
        .message {
            max-width: 70%;
            word-break: break-word;
            position: relative;
        }
        
        /* User messages (from users to your bot) - LEFT side */
        .message.from-user {
            align-self: flex-start;
        }
        
        /* Bot messages (from you to users) - RIGHT side */
        .message.from-bot {
            align-self: flex-end;
        }
        
        .message-bubble {
            padding: 12px 16px;
            border-radius: 18px;
            font-size: 14px;
            line-height: 1.4;
            position: relative;
        }
        
        /* User messages styling */
        .message.from-user .message-bubble {
            background-color: var(--darker);
            color: var(--light-text);
            border-bottom-left-radius: 5px;
        }
        
        /* Bot messages styling */
        .message.from-bot .message-bubble {
            background-color: var(--primary);
            color: white;
            border-bottom-right-radius: 5px;
        }
        
        .message-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 4px;
            font-size: 12px;
        }
        
        /* User message header styling */
        .message.from-user .message-header {
            color: var(--secondary-text);
        }
        
        /* Bot message header styling */
        .message.from-bot .message-header {
            color: rgba(255, 255, 255, 0.7);
        }
        
        .message-content {
            font-size: 14px;
            line-height: 1.4;
        }
        
        .message-meta {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 4px;
            font-size: 11px;
            color: var(--secondary-text);
        }
        
        /* User message meta styling */
        .message.from-user .message-meta {
            text-align: left;
        }
        
        /* Bot message meta styling */
        .message.from-bot .message-meta {
            text-align: right;
        }
        
        .chat-input-container {
            padding: 15px;
            border-top: 1px solid var(--darkest);
            display: flex;
        }
        
        .chat-input {
            flex: 1;
            padding: 12px;
            border-radius: 4px;
            border: none;
            background-color: var(--darker);
            color: var(--light-text);
            margin-right: 10px;
        }
        
        .chat-input:disabled {
            opacity: 0.7;
            cursor: not-allowed;
        }
        
        .send-button {
            padding: 12px 20px;
            border-radius: 4px;
            border: none;
            background-color: var(--primary);
            color: white;
            cursor: pointer;
            transition: background-color 0.2s;
        }
        
        .send-button:hover {
            background-color: var(--primary-dark);
        }
        
        .send-button:disabled {
            opacity: 0.7;
            cursor: not-allowed;
        }
        
        .error-message {
            background-color: var(--danger);
            color: white;
            padding: 10px;
            margin: 10px;
            border-radius: 4px;
            text-align: center;
        }
        
        .debug-info {
            background-color: var(--darkest);
            color: var(--secondary-text);
            padding: 10px;
            margin: 10px;
            border-radius: 4px;
            font-family: monospace;
            font-size: 12px;
            white-space: pre-wrap;
        }
        
        .empty-state {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            height: 100%;
            color: var(--secondary-text);
            padding: 20px;
            text-align: center;
        }
        
        .empty-state h3 {
            margin-bottom: 10px;
        }
        
        .debug-section {
            padding: 15px;
            border-top: 1px solid var(--darkest);
            background-color: var(--darkest);
            font-size: 12px;
            color: var(--secondary-text);
            max-height: 150px;
            overflow-y: auto;
        }
        
        .debug-toggle {
            cursor: pointer;
            display: flex;
            justify-content: space-between;
        }
        
        .debug-content {
            margin-top: 10px;
            display: none;
        }
        
        .debug-content.visible {
            display: block;
        }
        
        /* Mobile Responsiveness */
        @media (max-width: 768px) {
            .main-container {
                flex-direction: column;
            }
            
            .sidebar {
                width: 100%;
                height: 50%;
                border-right: none;
                border-bottom: 1px solid var(--darkest);
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>Discord Bot Dashboard</h1>
        <form action="/logout" method="POST" style="display: inline;">
            <button type="submit" class="logout-btn">Logout</button>
        </form>
    </div>
    
    <div class="analytics-container">
        <h2>Analytics</h2>
        <div class="analytics-cards">
            <div class="analytics-card">
                <h3>Total Members</h3>
                <div class="value"><%= stats.totalUsers %></div>
            </div>
            <div class="analytics-card">
                <h3>Total Conversations</h3>
                <div class="value"><%= conversations.length %></div>
            </div>
            <div class="analytics-card">
                <h3>Total Messages</h3>
                <div class="value"><%= stats.messagesTotal %></div>
            </div>
            <div class="analytics-card">
                <h3>Server Count</h3>
                <div class="value"><%= stats.serverCount %></div>
            </div>
        </div>
    </div>
    
    <% if (DEBUG_MODE) { %>
        <div class="debug-info">
            Conversations: <%= conversations.length %>
            Active User: <%= activeUser || 'None' %>
            Messages: <%= conversations.find(c => c.userId === activeUser)?.messages.length || 0 %>
        </div>
    <% } %>

    <% if (error) { %>
        <div class="error-message">
            <%= error %>
        </div>
    <% } %>

    <div class="main-container">
        <div class="sidebar">
            <div class="search-container">
                <input type="text" class="search-input" placeholder="Search conversations..." id="search-input">
            </div>
            <div class="conversations-list">
                <% if (conversations.length === 0) { %>
                    <div class="empty-state">
                        <h3>No conversations yet</h3>
                        <p>As soon as someone messages your bot, they'll appear here.</p>
                    </div>
                <% } else { %>
                    <% 
                    // Sort conversations: unread first, then by last activity
                    const sortedConversations = [...conversations].sort((a, b) => {
                        // Check for unread messages (we'll define this based on messages with no bot response)
                        const aUnread = a.messages.length > 0 && a.messages[a.messages.length - 1].fromUser === true;
                        const bUnread = b.messages.length > 0 && b.messages[b.messages.length - 1].fromUser === true;
                        
                        if (aUnread && !bUnread) return -1;
                        if (!aUnread && bUnread) return 1;
                        return b.lastActivity - a.lastActivity;
                    });
                    %>
                    
                    <% sortedConversations.forEach(conversation => { 
                        // Check if the last message is from user (unread)
                        const isUnread = conversation.messages.length > 0 && 
                                        conversation.messages[conversation.messages.length - 1].fromUser === true;
                    %>
                        <div class="conversation-item <%= conversation.userId === activeUser ? 'active' : '' %> <%= isUnread ? 'unread' : '' %>" 
                             onclick="window.location.href='/dashboard?userId=<%= conversation.userId %>'">
                            <div class="username">
                                <%= conversation.username %>
                                <% if (isUnread) { %>
                                    <span style="color: var(--primary); font-size: 10px;">NEW</span>
                                <% } %>
                            </div>
                            <div class="last-message">
                                <%= conversation.lastMessage ? conversation.lastMessage.substring(0, 40) + (conversation.lastMessage.length > 40 ? '...' : '') : 'No messages' %>
                            </div>
                            <div class="timestamp">
                                <%= new Date(conversation.lastActivity).toLocaleString() %>
                            </div>
                        </div>
                    <% }) %>
                <% } %>
            </div>
        </div>
        
        <div class="chat-container">
            <% if (!activeUser || conversations.length === 0) { %>
                <div class="empty-state">
                    <h3>No conversation selected</h3>
                    <p>Select a conversation from the sidebar or wait for new messages.</p>
                </div>
            <% } else { %>
                <% const activeConversation = conversations.find(c => c.userId === activeUser); %>
                <div class="chat-header">
                    <div>
                        <h2><%= activeConversation.username %></h2>
                        <span class="user-id">ID: <%= activeConversation.userId %></span>
                    </div>
                    <span class="timestamp">
                        Last activity: <%= new Date(activeConversation.lastActivity).toLocaleString() %>
                    </span>
                </div>
                
                <div class="chat-messages">
                    <% if (activeConversation.messages.length === 0) { %>
                        <div class="empty-state">
                            <h3>No messages yet</h3>
                            <p>When this user sends a message, it will appear here.</p>
                        </div>
                    <% } else { %>
                        <% activeConversation.messages.forEach(message => { %>
                            <div class="message <%= message.fromUser ? 'from-user' : 'from-bot' %>">
                                <div class="message-header">
                                    <span><%= message.fromUser ? activeConversation.username : 'Bot' %></span>
                                    <span class="timestamp"><%= new Date(message.timestamp).toLocaleString() %></span>
                                </div>
                                <div class="message-bubble">
                                    <div class="message-content"><%= message.content %></div>
                                </div>
                            </div>
                        <% }) %>
                    <% } %>
                </div>
                
                <form class="chat-input-container" id="reply-form">
                    <input type="text" 
                           class="chat-input" 
                           id="reply-input" 
                           placeholder="Type your reply..."
                           autocomplete="off">
                    <button type="submit" class="send-button">Send</button>
                </form>
            <% } %>
        </div>
    </div>
    
    <% if (DEBUG_MODE) { %>
    <div class="debug-section">
        <div class="debug-toggle">
            <span>Debug Information</span>
            <span id="debug-chevron">▼</span>
        </div>
        <div class="debug-content" id="debug-content">
            <pre>Active User: <%= activeUser %></pre>
            <pre>Total Conversations: <%= conversations.length %></pre>
            <pre>Total Messages: <%= stats.messagesTotal %></pre>
            <pre>Recent Messages: <%= JSON.stringify(messages.slice(0, 5), null, 2) %></pre>
        </div>
    </div>
    <% } %>
    
    <script>
        // Auto-scroll to bottom of messages
        document.addEventListener('DOMContentLoaded', function() {
            const chatMessages = document.querySelector('.chat-messages');
            if (chatMessages) {
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }
            
            // Setup search functionality
            const searchInput = document.getElementById('search-input');
            if (searchInput) {
                searchInput.addEventListener('input', function() {
                    const query = this.value.toLowerCase();
                    const items = document.querySelectorAll('.conversation-item');
                    
                    items.forEach(item => {
                        const username = item.querySelector('.username').textContent.toLowerCase();
                        const message = item.querySelector('.last-message').textContent.toLowerCase();
                        if (username.includes(query) || message.includes(query)) {
                            item.style.display = 'block';
                        } else {
                            item.style.display = 'none';
                        }
                    });
                });
            }
            
            // Debug toggle
            const debugToggle = document.querySelector('.debug-toggle');
            const debugContent = document.getElementById('debug-content');
            const debugChevron = document.getElementById('debug-chevron');
            
            if (debugToggle && debugContent) {
                debugToggle.addEventListener('click', function() {
                    debugContent.classList.toggle('visible');
                    debugChevron.textContent = debugContent.classList.contains('visible') ? '▲' : '▼';
                });
            }
        });

        document.addEventListener('DOMContentLoaded', function() {
            // Handle reply form submission
            const replyForm = document.getElementById('reply-form');
            const replyInput = document.getElementById('reply-input');
            
            if (replyForm) {
                replyForm.addEventListener('submit', async function(event) {
                    event.preventDefault(); // Prevent form from submitting normally
                    
                    const content = replyInput.value.trim();
                    if (!content) return; // Don't send empty messages
                    
                    const activeUser = '<%= activeUser %>';
                    if (!activeUser) return;
                    
                    try {
                        // Show some feedback that the message is being sent
                        replyInput.disabled = true;
                        const sendButton = replyForm.querySelector('.send-button');
                        sendButton.disabled = true;
                        
                        const response = await fetch('/reply', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                userId: activeUser,
                                content: content
                            })
                        });
                        
                        const result = await response.json();
                        
                        if (result.success) {
                            // Clear the input field
                            replyInput.value = '';
                            
                            // Add the message to the UI without refreshing
                            const messagesContainer = document.querySelector('.chat-messages');
                            const newMessage = document.createElement('div');
                            newMessage.className = 'message from-bot'; // Bot messages appear on right
                            
                            const now = new Date();
                            const timestamp = now.toLocaleString();
                            
                            newMessage.innerHTML = `
                                <div class="message-header">
                                    <span>Bot</span>
                                    <span class="timestamp">${timestamp}</span>
                                </div>
                                <div class="message-bubble">
                                    <div class="message-content">${content}</div>
                                </div>
                            `;
                            
                            messagesContainer.appendChild(newMessage);
                            messagesContainer.scrollTop = messagesContainer.scrollHeight;
                        } else {
                            alert('Failed to send message: ' + (result.error || 'Unknown error'));
                        }
                    } catch (error) {
                        console.error('Error sending reply:', error);
                        alert('Failed to send message. Please try again.');
                    } finally {
                        replyInput.disabled = false;
                        const sendButton = replyForm.querySelector('.send-button');
                        sendButton.disabled = false;
                        replyInput.focus();
                    }
                });
            }
            
            // Scroll messages to bottom on load
            const messages = document.querySelector('.chat-messages');
            if (messages) {
                messages.scrollTop = messages.scrollHeight;
            }
        });
    </script>
</body>
</html>